//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Runtime.InteropServices;
using LuaInterface;

public class BaseTestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BaseTest), typeof(System.Object));
		L.RegFunction("TestRef", TestRef);
		L.RegFunction("New", _CreateBaseTest);
		L.RegVar("PropertyTest", get_PropertyTest, set_PropertyTest);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBaseTest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				BaseTest obj = new BaseTest();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BaseTest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseTest obj = (BaseTest)ToLua.CheckObject<BaseTest>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.TestRef(ref arg0);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushinteger(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyTest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BaseTest obj = (BaseTest)o;
			int ret = obj.PropertyTest;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PropertyTest on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyTest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BaseTest obj = (BaseTest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.PropertyTest = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PropertyTest on a nil value");
		}
	}
}

