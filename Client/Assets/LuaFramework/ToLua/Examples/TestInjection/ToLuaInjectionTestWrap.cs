//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Runtime.InteropServices;
using LuaInterface;

public class ToLuaInjectionTestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToLuaInjectionTest), typeof(BaseTest));
		L.RegFunction("TestRef", TestRef);
		L.RegFunction("TestOverload", TestOverload);
		L.RegFunction("TestCoroutine", TestCoroutine);
		L.RegFunction("New", _CreateToLuaInjectionTest);
        L.RegVar("PropertyTest", get_PropertyTest, set_PropertyTest);
        L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToLuaInjectionTest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ToLuaInjectionTest obj = new ToLuaInjectionTest();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				ToLuaInjectionTest obj = new ToLuaInjectionTest(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToLuaInjectionTest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaInjectionTest obj = (ToLuaInjectionTest)ToLua.CheckObject<ToLuaInjectionTest>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.TestRef(ref arg0);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushinteger(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestOverload(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<bool, int>(L, 2))
			{
				ToLuaInjectionTest obj = (ToLuaInjectionTest)ToLua.CheckObject<ToLuaInjectionTest>(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.TestOverload(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				ToLuaInjectionTest obj = (ToLuaInjectionTest)ToLua.CheckObject<ToLuaInjectionTest>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.TestOverload(arg0, ref arg1);
				LuaDLL.lua_pushboolean(L, arg1);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				ToLuaInjectionTest obj = (ToLuaInjectionTest)ToLua.CheckObject<ToLuaInjectionTest>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.TestOverload(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaInjectionTest.TestOverload");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaInjectionTest obj = (ToLuaInjectionTest)ToLua.CheckObject<ToLuaInjectionTest>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.IEnumerator o = obj.TestCoroutine(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyTest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaInjectionTest obj = (ToLuaInjectionTest)o;
			int ret = obj.PropertyTest;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PropertyTest on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyTest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaInjectionTest obj = (ToLuaInjectionTest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.PropertyTest = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PropertyTest on a nil value");
		}
	}
}

