//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Framework_SingletoninterfaceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Framework.Singletoninterface), typeof(System.Object));
		L.RegFunction("OnInitialize", OnInitialize);
		L.RegFunction("OnUninitialize", OnUninitialize);
		L.RegFunction("New", _CreateFramework_Singletoninterface);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFramework_Singletoninterface(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("Framework.Singletoninterface.ctor");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Framework.Singletoninterface obj = new Framework.Singletoninterface();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Framework.Singletoninterface.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitialize(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("Framework.Singletoninterface.OnInitialize");
#endif
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Singletoninterface obj = (Framework.Singletoninterface)ToLua.CheckObject<Framework.Singletoninterface>(L, 1);
			obj.OnInitialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUninitialize(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("Framework.Singletoninterface.OnUninitialize");
#endif
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Singletoninterface obj = (Framework.Singletoninterface)ToLua.CheckObject<Framework.Singletoninterface>(L, 1);
			obj.OnUninitialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

