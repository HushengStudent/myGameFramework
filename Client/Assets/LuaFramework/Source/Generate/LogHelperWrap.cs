//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LogHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LogHelper), typeof(System.Object));
		L.RegFunction("Print", Print);
		L.RegFunction("PrintWarning", PrintWarning);
		L.RegFunction("PrintGreen", PrintGreen);
		L.RegFunction("PrintError", PrintError);
		L.RegFunction("New", _CreateLogHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("LogEnable", get_LogEnable, set_LogEnable);
		L.RegVar("WarningEnable", get_WarningEnable, set_WarningEnable);
		L.RegVar("ErrorEnable", get_ErrorEnable, set_ErrorEnable);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLogHelper(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.ctor");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LogHelper obj = new LogHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LogHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Print(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.Register");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogHelper.Print(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<LogColor>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogColor arg1 = (LogColor)ToLua.ToObject(L, 2);
				LogHelper.Print(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LogHelper.Print(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogColor arg1 = (LogColor)ToLua.CheckObject(L, 2, typeof(LogColor));
				string arg2 = ToLua.CheckString(L, 3);
				LogHelper.Print(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogHelper.Print");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintWarning(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.Register");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogHelper.PrintWarning(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LogHelper.PrintWarning(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogHelper.PrintWarning");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintGreen(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.Register");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogHelper.PrintGreen(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LogHelper.PrintGreen(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogHelper.PrintGreen");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintError(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.Register");
#endif
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				LogHelper.PrintError(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LogHelper.PrintError(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LogHelper.PrintError");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.LogEnable");
#endif
		try
		{
			LuaDLL.lua_pushboolean(L, LogHelper.LogEnable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WarningEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.WarningEnable");
#endif
		try
		{
			LuaDLL.lua_pushboolean(L, LogHelper.WarningEnable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.ErrorEnable");
#endif
		try
		{
			LuaDLL.lua_pushboolean(L, LogHelper.ErrorEnable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.LogEnable");
#endif
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LogHelper.LogEnable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WarningEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.WarningEnable");
#endif
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LogHelper.WarningEnable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ErrorEnable(IntPtr L)
	{
#if UNITY_EDITOR
        ToluaProfiler.AddCallRecord("LogHelper.ErrorEnable");
#endif
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LogHelper.ErrorEnable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

