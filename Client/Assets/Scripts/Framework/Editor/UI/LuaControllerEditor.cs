/********************************************************************************
** auth:  https://github.com/HushengStudent
** date:  2018/01/17 23:41:41
** desc:  编辑器扩展;
*********************************************************************************/

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Framework
{
    [CustomEditor(typeof(LuaController))]
    public class LuaControllerEditor : Editor
    {
        private string _ctrlPath = EnvVariableHelper.GameFrameworkPath + "Client/Assets/LuaFramework/Lua/Panel/Controller/";
        private string _dataPath = EnvVariableHelper.GameFrameworkPath + "Client/Assets/LuaFramework/Lua/Panel/Data/";
        private string _panelPath = EnvVariableHelper.GameFrameworkPath + "Client/Assets/LuaFramework/Lua/Panel/View/";
        private string _luaCom = "       self.ComponentList.ComName = l_ctrl.componentArray[index]\r\n";

        private StringBuilder _ctrlBuilder = new StringBuilder()
            .AppendLine("-- -")
            .AppendLine("---This code was generated by a tool.")
            .AppendLine("---To coding to do what u want to do.")
            .AppendLine("---")
            .AppendLine(" ")
            .AppendLine("module(\"UI\", package.seeall)")
            .AppendLine(" ")
            .AppendLine("require \"Panel.View.ModuleNamePanel\"")
            .AppendLine("require \"Panel.Data.ModuleNameData\"")
            .AppendLine(" ")
            .AppendLine("ModuleNameCtrl = class(\"ModuleNameCtrl\",BaseCtrl)")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:ctor()")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:Awake(msg)")
            .AppendLine("       log(\"--->>>ModuleNameCtrl Awake be called.\")")
            .AppendLine("       local l_panel = ModuleNamePanel.new()")
            .AppendLine("       self.panel = l_panel:BindLuaComponent(msg[0])")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:Start()")
            .AppendLine("       log(\"--->>>ModuleNameCtrl Start be called.\")")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:OnEnable()")
            .AppendLine("       log(\"--->>>ModuleNameCtrl OnEnable be called.\")")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:OnDisable()")
            .AppendLine("       log(\"--->>>ModuleNameCtrl OnDisable be called.\")")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameCtrl:OnDestroy()")
            .AppendLine("       log(\"--->>>ModuleNameCtrl OnDestroy be called.\")")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine("-----------------------------超华丽的分割线-----------------------------");

        private StringBuilder _panelBuilder = new StringBuilder()
            .AppendLine("---")
            .AppendLine("---This code was generated by a tool.")
            .AppendLine("---Forbid To coding.")
            .AppendLine("---")
            .AppendLine(" ")
            .AppendLine("module(\"UI\", package.seeall)")
            .AppendLine(" ")
            .AppendLine("ModuleNamePanel = class(\"ModuleNamePanel\")")
            .AppendLine(" ")
            .AppendLine("function ModuleNamePanel:ctor()")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNamePanel:BindLuaComponent(gameObject)")
            .AppendLine("       local l_ctrl = gameObject:GetComponent(\"LuaController\")")
            .AppendLine("       self.ComponentList = {}")
            .AppendLine("#List#")
            .AppendLine("       return self.ComponentList")
            .AppendLine("end");

        private StringBuilder _dataBuilder = new StringBuilder()
            .AppendLine("---")
            .AppendLine("---This code was generated by a tool.")
            .AppendLine("---To coding to do what u want to do.")
            .AppendLine("---")
            .AppendLine(" ")
            .AppendLine("module(\"UI\", package.seeall)")
            .AppendLine(" ")
            .AppendLine("ModuleNameData = {} ")
            .AppendLine(" ")
            .AppendLine("function ModuleNameData.SerializNetData(msg)")
            .AppendLine("       log(\"--->>>ModuleNameData SerializNetData.\")")
            .AppendLine(" ")
            .AppendLine("end")
            .AppendLine(" ")
            .AppendLine("function ModuleNameData.Clear()")
            .AppendLine("       log(\"--->>>Clear ModuleNameData.\")")
            .AppendLine(" ")
            .AppendLine("end");

        public override void OnInspectorGUI()
        {
            base.DrawDefaultInspector();
            if (GUILayout.Button("\r\n" + "更新Prefab信息"))
            {
                LuaController ctrl = target as LuaController;
                if (null == ctrl) return;
                LuaComponent[] componentArray = ctrl.gameObject.GetComponentsInChildren<LuaComponent>();
                List<string> nameList = new List<string>();
                for (int i = 0; i < componentArray.Length; i++)
                {
                    if (string.IsNullOrEmpty(componentArray[i].ComponentName))
                    {
                        componentArray[i].ComponentName =
                        componentArray[i].gameObject.name.Replace(" ", "").Replace("(", "").Replace("（", "").Replace(")", "").Replace("）", "").Replace("{", "").Replace("}", "").Replace(".", "");
                        if (nameList.Contains(componentArray[i].ComponentName))
                        {
                            LogHelper.PrintError("[LuaControllerEditor]名字重复：" + componentArray[i].ComponentName);
                        }
                        nameList.Add(componentArray[i].ComponentName);
                    }
                    else
                    {
                        if (nameList.Contains(componentArray[i].ComponentName))
                        {
                            LogHelper.PrintError("[LuaControllerEditor]名字重复：" + componentArray[i].ComponentName);
                        }
                        nameList.Add(componentArray[i].ComponentName);
                    }
                }
                nameList.Clear();
                ctrl.componentArray = new LuaComponent[componentArray.Length];
                for (int i = 0; i < ctrl.componentArray.Length; i++)
                {
                    ctrl.componentArray[i] = componentArray[i];
                }
                AssetDatabase.SaveAssets();
                AssetDatabase.Refresh();
            }
            if (GUILayout.Button("\r\n" + "创建Controller"))
            {
                LuaController ctrl = target as LuaController;
                if (null == ctrl)
                {
                    LogHelper.PrintError("[LuaControllerEditor]LuaController is null.");
                    return;
                }
                string name = ctrl.gameObject.name;
                string fileName = _ctrlPath + name + "Ctrl.lua";
                if (File.Exists(fileName))
                {
                    EditorUtility.DisplayDialog("Lua文件生成提示", "Lua文件： " + name + "Ctrl.lua" + " 已存在！", "确认");
                    return;
                }
                TextWriter tw = new StreamWriter(fileName);
                tw.Close();
                string allText = _ctrlBuilder.ToString().Replace("ModuleName", name);
                File.WriteAllText(fileName, allText);
                EditorUtility.DisplayDialog("Lua文件生成提示", "Lua文件： " + name + "Ctrl.lua" + " 生成成功！", "确认");
                AssetDatabase.Refresh();
            }
            if (GUILayout.Button("\r\n" + "更新 Panel"))
            {
                LuaController ctrl = target as LuaController;
                if (null == ctrl)
                {
                    LogHelper.PrintError("[LuaControllerEditor]LuaController is null.");
                    return;
                }
                string name = ctrl.gameObject.name;
                string fileName = _panelPath + name + "Panel.lua";
                if (File.Exists(fileName))
                {
                    File.Delete(fileName);
                }
                TextWriter tw = new StreamWriter(fileName);
                tw.Close();
                string tempStr = _panelBuilder.ToString().Replace("ModuleName", name);
                string comStr = "";
                for (int i = 0; i < ctrl.componentArray.Length; i++)
                {
                    comStr = comStr + _luaCom.Replace("ComName", ctrl.componentArray[i].ComponentName).Replace("index", i.ToString());
                }
                string allText = tempStr.Replace("#List#", comStr);
                File.WriteAllText(fileName, allText);
                EditorUtility.DisplayDialog("Lua文件生成提示", "Lua文件： " + name + "Panel.lua" + " 生成成功！", "确认");
                AssetDatabase.Refresh();
            }
            if (GUILayout.Button("\r\n" + "创建 Data"))
            {
                LuaController ctrl = target as LuaController;
                if (null == ctrl)
                {
                    LogHelper.PrintError("[LuaControllerEditor]LuaController is null.");
                    return;
                }
                string name = ctrl.gameObject.name;
                string fileName = _dataPath + name + "Data.lua";
                if (File.Exists(fileName))
                {
                    EditorUtility.DisplayDialog("Lua文件生成提示", "Lua文件： " + name + "Data.lua" + " 已存在！", "确认");
                    return;
                }
                TextWriter tw = new StreamWriter(fileName);
                tw.Close();
                string allText = _dataBuilder.ToString().Replace("ModuleName", name);
                File.WriteAllText(fileName, allText);
                EditorUtility.DisplayDialog("Lua文件生成提示", "Lua文件： " + name + "Data.lua" + " 生成成功！", "确认");
                AssetDatabase.Refresh();
            }
        }

        /*
        [InitializeOnLoadMethod]
        static void StartInitializeOnLoadMethod()
        {
            PrefabUtility.prefabInstanceUpdated = delegate (GameObject instance)
            {
                LuaController ctrl = instance.GetComponent<LuaController>();
                if (null == ctrl) return;
                LuaComponent[] componentArray = instance.GetComponentsInChildren<LuaComponent>();
                for (int i = 0; i < componentArray.Length; i++)
                {
                    if (string.IsNullOrEmpty(componentArray[i].ComponentName))
                    {
                        componentArray[i].ComponentName = componentArray[i].gameObject.name;
                    }
                }
                ctrl.componentArray = new LuaComponent[componentArray.Length];
                for (int i = 0; i < ctrl.componentArray.Length; i++)
                {
                    ctrl.componentArray[i] = componentArray[i];
                }
                AssetDatabase.SaveAssets();
            };
        }
        */
    }
}
